<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">

	<flow name="schedulerFlow" doc:id="aff4106d-d2f6-4366-940a-a380dcb1cf73">
		<scheduler doc:name="Scheduler" doc:id="58b7c776-fbee-4753-9bea-f6cc3e037efd">
			<scheduling-strategy>
				<fixed-frequency frequency="${scheduler.frequency}"
					startDelay="${scheduler.startDelay}" />
			</scheduling-strategy>
		</scheduler>
		<os:retrieve key="syncState" doc:name="Retrieve sync state"
			objectStore="SchedulerStatus" target="syncState">
			<os:default-value><![CDATA[fromA]]></os:default-value>

		</os:retrieve>
		<choice doc:name="SyncState?" doc:id="b4703d83-780b-4e2d-bf5d-51b1566d66e2">
			<when
				expression="#[(vars.syncState != 'running' and vars.syncState == 'fromA') or vars.syncState == null]">
				<logger level="INFO" doc:name="running from A"
					doc:id="c9cd1c27-5978-4ad8-b87f-99da49944447" message="running from A" />
				<os:store key="syncState" doc:name="Set sync state to running"
					doc:id="340ac5e0-764f-4164-aeaa-14e616987553" objectStore="SchedulerStatus">
					<os:value><![CDATA[running]]></os:value>
				</os:store>
				<flow-ref doc:name="sfdcQueryFlowA" doc:id="b0c87553-d459-4f12-940c-0f8f19892266"
					name="sfdcQueryFlowA" />
				<flow-ref doc:name="fromSalesforceAtoSalesforceB" doc:id="43633fd4-8ec3-4899-8a82-93b88f816122"
					name="fromSalesforceAtoSalesforceB" />


			</when>
			<when expression="#[vars.syncState != 'running' and vars.syncState == 'fromB']">
				<logger level="INFO" doc:name="running from B"
					doc:id="840599bf-2442-45d6-b66d-fbe11593bd60" message="running from B" />
				<os:store key="syncState" doc:name="Set sync state to running"
					doc:id="5059b820-0895-4454-9e50-e686d0f07758" objectStore="SchedulerStatus">
					<os:value><![CDATA[running]]></os:value>
				</os:store>
				<flow-ref doc:name="sfdcQueryFlowB" doc:id="121efa5b-33a7-4c76-aa72-3112507c4c0b"
					name="sfdcQueryFlowB" />
				<flow-ref doc:name="fromSalesforceBtoSalesforceA" doc:id="d8baf0c3-ace8-4d57-80c5-f7ea614d3946"
					name="fromSalesforceBtoSalesforceA" />


			</when>
			<otherwise>
				<logger level="INFO" doc:name="Batch running"
					doc:id="bf955eec-4baf-4836-b7fd-7d77ff5ebcb1" message="Batch running" />
			</otherwise>
		</choice>
		<error-handler>
			<on-error-propagate enableNotifications="true"
				logException="true" doc:name="On Error Propagate" doc:id="488b507d-e26c-4c56-8759-8bb4f6645d71"
				type="ANY">
				<flow-ref doc:name="errorHandlingFlow" doc:id="afdaf73c-0137-4d60-84f6-5c41234771a3"
					name="errorHandlingFlow" />
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="sfdcQueryFlowA">
		<os:retrieve key="watermark" objectStore="watermarkStoreA"
			target="lastQueryDateA" doc:name="Retrieve lastQueryDateA">
			<os:default-value><![CDATA[#[p('watermark.default.expression')]]]></os:default-value>
		</os:retrieve>
		<salesforce:query config-ref="Salesforce_Sfdc_A_config"
			doc:name="Query User with filtering criteria from Salesforce Instance A">
			<salesforce:salesforce-query>SELECT Email, FirstName, LastName,
				Username, Alias, TimeZoneSidKey, LocaleSidKey, EmailEncodingKey,
				ProfileId, LanguageLocaleKey, LastModifiedDate FROM User WHERE
				IsActive = true AND LastModifiedDate &gt; :lastModifiedDate AND
				LastModifiedById &lt;&gt; '${sfdc.a.integration.user.id}' ORDER BY
				LastModifiedDate ASC LIMIT 200</salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[output applicaton/java
---
{
	"lastModifiedDate" : vars.lastQueryDateA
}]]]></salesforce:parameters>
</salesforce:query>
		<os:store key="watermark" failOnNullValue="false"
			objectStore="watermarkStoreA" doc:name="Store lastQueryDateA">
			<os:value><![CDATA[#[max(payload map $.LastModifiedDate) as String]]]></os:value>
		</os:store>
</flow>
	<flow name="sfdcQueryFlowB">
		<os:retrieve key="watermark" objectStore="watermarkStoreB"
			target="lastQueryDateB" doc:name="Retrieve lastQueryDateB">
			<os:default-value><![CDATA[#[p('watermark.default.expression')]]]></os:default-value>
		</os:retrieve>
		<salesforce:query config-ref="Salesforce_Sfdc_B_config"
			doc:name="Query User with filtering criteria from Salesforce Instance B">
			<salesforce:salesforce-query>SELECT Email, FirstName, LastName,
				Username, Alias, TimeZoneSidKey, LocaleSidKey, EmailEncodingKey,
				ProfileId, LanguageLocaleKey, LastModifiedDate FROM User WHERE
				IsActive = true AND LastModifiedDate &gt; :lastModifiedDate AND
				LastModifiedById &lt;&gt; '${sfdc.b.integration.user.id}' ORDER BY
				LastModifiedDate ASC LIMIT 200</salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[output applicaton/java
---
{
	"lastModifiedDate" : vars.lastQueryDateB
}]]]></salesforce:parameters>

		</salesforce:query>
		<os:store key="watermark" failOnNullValue="false"
			objectStore="watermarkStoreB" doc:name="Store lastQueryDateB">
			<os:value><![CDATA[#[max(payload map $.LastModifiedDate) as String]]]></os:value>
		</os:store>
</flow>
</mule>
